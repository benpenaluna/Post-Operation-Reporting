Namespace Controls
    Public Class TriStateTreeView
        Inherits TreeView

        '       // <summary>
        '// A Tri-State TreeView designed for on-demand populating of the tree
        '// </summary>
        '// <remarks>
        '// 'Mixed' nodes retain their checked state, meaning they can be checked or unchecked according to their current state
        '// Tree can be navigated by keyboard (cursor keys & space)
        '// No need to do anything special in calling code
        '// </remarks>
        'Public Class TriStateTreeView :  System.Windows.Forms.TreeView
        '{
        '	// <remarks>
        '	// CheckedState Is an enum of all allowable nodes states
        '	// </remarks>
        '	Public Enum CheckedState : int { UnInitialised = -1, UnChecked, Checked, Mixed };
        Enum CheckedState
            UnInitialised = -1
            UnChecked
            Checked
            Mixed
        End Enum
        '	// <remarks>
        '	// IgnoreClickAction Is used to ingore messages generated by setting the node.Checked flag in code
        '	// Do Not set <c>e.Cancel = true</c> in <c>OnBeforeCheck</c> otherwise the Checked state will be lost
        '	// </remarks>
        '	int IgnoreClickAction = 0;
        Public IgnoreClickAction As Integer = 0

        '	// <remarks>

        '	// TriStateStyles Is an enum of all allowable tree styles
        '	// All styles check children when parent Is checked
        '	// Installer automatically checks parent if all children are checked, And unchecks parent if at least one child Is unchecked
        '	// Standard never changes the checked status of a parent
        '	// </remarks>
        '	Public Enum TriStateStyles : int { Standard = 0, Installer };
        Enum TriStateStyles
            Standard = 0
            Installer
        End Enum


        '	// Create a private member for the tree style, And allow it to be set on the property sheer
        '	Private TriStateStyles TriStateStyle = TriStateStyles.Standard;
        Private TriStateStyle As TriStateStyles = TriStateStyles.Standard

        '	[System.ComponentModel.Category("Tri-State Tree View")]
        '	[System.ComponentModel.DisplayName("Style")]
        '	[System.ComponentModel.Description("Style of the Tri-State Tree View")]
        '	Public TriStateStyles TriStateStyleProperty
        '	{
        '		Get { Return TriStateStyle; }
        '		Set { TriStateStyle = value; } 
        '	}
        Public Property TriStateStyleProperty As TriStateStyles
            Get
                Return TriStateStyle
            End Get
            Set
                TriStateStyle = Value
            End Set
        End Property

        '	// <summary>
        '	// Constructor.  Create And populate an image list
        '	// </summary>
        '	Public TriStateTreeView() :  base()
        '	{
        '		StateImageList = New System.Windows.Forms.ImageList();

        '		// populate the image list, using images from the System.Windows.Forms.CheckBoxRenderer class
        '		For (int i = 0; i < 3; i++)
        '		{
        '			// Create a bitmap which holds the relevent check box style
        '			// see http://msdn.microsoft.com/en-us/library/ms404307.aspx And http://msdn.microsoft.com/en-us/library/system.windows.forms.checkboxrenderer.aspx

        '			System.Drawing.Bitmap bmp = New System.Drawing.Bitmap(16, 16);
        '			System.Drawing.Graphics chkGraphics = System.Drawing.Graphics.FromImage(bmp);
        '			switch ( i )
        '			{
        '				// 0,1 - offset the checkbox slightly so it positions in the correct place
        '				Case 0 : 
        '					System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(chkGraphics, New System.Drawing.Point(0, 1), System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);
        '					break;
        '				Case 1 : 
        '					System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(chkGraphics, New System.Drawing.Point(0, 1), System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal);
        '					break;
        '				Case 2 : 
        '					System.Windows.Forms.CheckBoxRenderer.DrawCheckBox(chkGraphics, New System.Drawing.Point(0, 1), System.Windows.Forms.VisualStyles.CheckBoxState.MixedNormal);
        '					break;
        '			}

        '			StateImageList.Images.Add(bmp);
        '		}
        '	}
        Sub New()
            MyBase.New()

            StateImageList = New ImageList()

            For i = 0 To 2
                Dim bmp = New Bitmap(16, 16)
                Dim chkGraphics As Graphics = Graphics.FromImage(bmp)

                Select Case i
                    Case 0
                        CheckBoxRenderer.DrawCheckBox(chkGraphics, New Point(0, 1), VisualStyles.CheckBoxState.UncheckedNormal)
                    Case 1
                        CheckBoxRenderer.DrawCheckBox(chkGraphics, New Point(0, 1), VisualStyles.CheckBoxState.CheckedNormal)
                    Case 2
                        CheckBoxRenderer.DrawCheckBox(chkGraphics, New Point(0, 1), VisualStyles.CheckBoxState.MixedNormal)
                End Select

                StateImageList.Images.Add(bmp)
            Next
        End Sub

        '	// <summary>
        '	// Called once before window displayed.  Disables default Checkbox functionality And ensures all nodes display an 'unchecked' image.
        '	// </summary>
        '	Protected override void OnCreateControl()
        '	{
        '		base.OnCreateControl();
        '		CheckBoxes = false;			// Disable default CheckBox functionality if it's been enabled

        '		// Give every node an initial 'unchecked' image
        '		IgnoreClickAction++;	// we're making changes to the tree, ignore any other change requests
        '		UpdateChildState(this.Nodes, (int)CheckedState.UnChecked, false, true);
        '		IgnoreClickAction--;
        '	}
        Protected Overrides Sub OnCreateControl()
            MyBase.OnCreateControl()
            CheckBoxes = False

            '		// Give every node an initial 'unchecked' image
            IgnoreClickAction += 1
            UpdateChildState(Nodes, CheckedState.UnChecked, False, True)
            IgnoreClickAction -= 1
        End Sub

        '	// <summary>
        '	// Called after a node Is checked.  Forces all children to inherit current state, And notifies parents they may need to become 'mixed'
        '	// </summary>
        '	Protected override void OnAfterCheck(System.Windows.Forms.TreeViewEventArgs e)
        '	{
        '		base.OnAfterCheck(e);

        '		If ()
        '		{
        '			Return;
        '		}

        '		IgnoreClickAction++;	// we're making changes to the tree, ignore any other change requests

        '		// the checked state has already been changed, we just need to update the state index

        '		// node Is either ticked Or unticked.  ignore mixed state, as the node Is still only ticked Or unticked regardless of state of children
        '		System.Windows.Forms.TreeNode tn = e.Node;
        '		tn.StateImageIndex = tn.Checked ? (int)CheckedState.Checked : (int)CheckedState.UnChecked;

        '		// force all children to inherit the same state as the current node
        '		UpdateChildState(e.Node.Nodes, e.Node.StateImageIndex, e.Node.Checked, false);

        '		// populate state up the tree, possibly resulting in parents with mixed state
        '		UpdateParentState(e.Node.Parent);

        '		IgnoreClickAction--;
        '	}

        Protected Overrides Sub OnAfterCheck(e As TreeViewEventArgs)
            MyBase.OnAfterCheck(e)

            If IgnoreClickAction > 0 Then
                Return
            End If

            IgnoreClickAction += 1

            Dim tn As TreeNode = e.Node
            tn.StateImageIndex = If(tn.Checked, CheckedState.Checked, CheckedState.UnChecked)

            UpdateChildState(e.Node.Nodes, e.Node.StateImageIndex, e.Node.Checked, False)

            UpdateParentState(e.Node.Parent)

            IgnoreClickAction -= 1
        End Sub

        '	// <summary>
        '	// Called after a node Is expanded.  Ensures any New nodes display an 'unchecked' image
        '	// </summary>
        '	Protected override void OnAfterExpand(System.Windows.Forms.TreeViewEventArgs e)
        '	{
        '		// If any child node Is New, give it the same check state as the current node
        '		// So if current node Is ticked, child nodes will also be ticked
        '		base.OnAfterExpand(e);

        '		IgnoreClickAction++;	// we're making changes to the tree, ignore any other change requests
        '		UpdateChildState(e.Node.Nodes, e.Node.StateImageIndex, e.Node.Checked, true);
        '		IgnoreClickAction--;
        '	}
        Protected Overrides Sub OnAfterExpand(e As TreeViewEventArgs)
            MyBase.OnAfterExpand(e)

            IgnoreClickAction += 1
            UpdateChildState(e.Node.Nodes, e.Node.StateImageIndex, e.Node.Checked, True)
            IgnoreClickAction -= 1
        End Sub


        '	// <summary>
        '	// Helper function to replace child state with that of the parent
        '	// </summary>
        '	Protected void UpdateChildState(System.Windows.Forms.TreeNodeCollection Nodes, int StateImageIndex, bool Checked, bool ChangeUninitialisedNodesOnly)
        '	{
        '		foreach (System.Windows.Forms.TreeNode tnChild in Nodes)
        '		{
        '			If (!ChangeUninitialisedNodesOnly || tnChild.StateImageIndex == -1)
        '			{
        '				tnChild.StateImageIndex = StateImageIndex;
        '				tnChild.Checked = Checked;	// override 'checked' state of child with that of parent

        '				If (tnChild.Nodes.Count > 0)
        '				{
        '					UpdateChildState(tnChild.Nodes, StateImageIndex, Checked, ChangeUninitialisedNodesOnly);
        '				}
        '			}
        '		}
        '	}

        Protected Sub UpdateChildState(Nodes As TreeNodeCollection, StateImageIndex As Integer, Checked As Boolean, ChangeUninitialisedNodesOnly As Boolean)
            For Each tnChild As TreeNode In Nodes
                If Not ChangeUninitialisedNodesOnly OrElse tnChild.StateImageIndex = -1 Then
                    tnChild.StateImageIndex = StateImageIndex
                    tnChild.Checked = Checked

                    If tnChild.Nodes.Count > 0 Then
                        UpdateChildState(tnChild.Nodes, StateImageIndex, Checked, ChangeUninitialisedNodesOnly)
                    End If
                End If
            Next
        End Sub

        '	// <summary>
        '	// Helper function to notify parent it may need to use 'mixed' state
        '	// </summary>
        '	Protected void UpdateParentState(System.Windows.Forms.TreeNode tn)
        '	{
        '		// Node needs to check all of it's children to see if any of them are ticked or mixed
        '		If (tn == null)
        '           Return;

        '		int OrigStateImageIndex = tn.StateImageIndex;

        '		int UnCheckedNodes = 0, CheckedNodes = 0, MixedNodes = 0;

        '		// The parent needs to know how many of it's children are Checked or Mixed
        '		foreach (System.Windows.Forms.TreeNode tnChild in tn.Nodes)
        '		{
        '			If (tnChild.StateImageIndex == (int)CheckedState.Checked)
        '				CheckedNodes++;
        '			ElseIf (tnChild.StateImageIndex == (int)CheckedState.Mixed)
        '			{
        '				MixedNodes++;
        '				break;
        '			}
        '			Else
        '				UnCheckedNodes++;
        '		}

        '		If (TriStateStyle == TriStateStyles.Installer)
        '		{
        '			// In Installer mode, if all child nodes are checked then parent Is checked
        '			// If at least one child Is unchecked, then parent Is unchecked
        '			If (MixedNodes == 0)
        '			{
        '				If (UnCheckedNodes == 0)
        '				{
        '					// all children are checked, so parent must be checked
        '					tn.Checked = true;
        '				}
        '				Else
        '				{
        '					// at least one child Is unchecked, so parent must be unchecked
        '					tn.Checked = false;
        '				}
        '			}
        '		}

        '		// Determine the parent's new Image State
        '		If (MixedNodes > 0)
        '		{
        '			// at least one child Is mixed, so parent must be mixed
        '			tn.StateImageIndex = (int)CheckedState.Mixed;
        '		}
        '		ElseIf (CheckedNodes > 0 && UnCheckedNodes == 0)
        '		{
        '			// all children are checked
        '			If (tn.Checked)
        '				tn.StateImageIndex = (int)CheckedState.Checked;
        '			Else
        '				tn.StateImageIndex = (int)CheckedState.Mixed;
        '		}
        '		ElseIf (CheckedNodes > 0)
        '		{
        '			// some children are checked, the rest are unchecked
        '			tn.StateImageIndex = (int)CheckedState.Mixed;
        '		}
        '		Else
        '		{
        '			// all children are unchecked
        '			If (tn.Checked)
        '				tn.StateImageIndex = (int)CheckedState.Mixed;
        '			Else
        '				tn.StateImageIndex = (int)CheckedState.UnChecked;
        '		}

        '		If (OrigStateImageIndex!= tn.StateImageIndex && tn.Parent!= null)
        '		{
        '			// Parent's state has changed, notify the parent's parent
        '			UpdateParentState(tn.Parent);
        '		}
        '	}

        Protected Sub UpdateParentState(tn As TreeNode)
            If tn Is Nothing Then
                Return
            End If

            Dim origStateImageIndex As Integer = tn.StateImageIndex

            Dim unCheckedNodes As Integer = 0
            Dim checkedNodes As Integer = 0
            Dim mixedNodes As Integer = 0

            DetermineNumberOfChildrenChecked(tn, unCheckedNodes, checkedNodes, mixedNodes)

            If TriStateStyle = TriStateStyles.Installer AndAlso mixedNodes = 0 Then
                tn.Checked = unCheckedNodes = 0
            End If

            tn = DetermineParentsNewImageState(tn, unCheckedNodes, checkedNodes, mixedNodes)

            NotifyParentsParent(tn, origStateImageIndex)
        End Sub

        Private Shared Sub DetermineNumberOfChildrenChecked(tn As TreeNode, ByRef UnCheckedNodes As Integer, ByRef CheckedNodes As Integer, ByRef MixedNodes As Integer)
            For Each tnChild As TreeNode In tn.Nodes
                If tnChild.StateImageIndex = CheckedState.Checked Then
                    CheckedNodes += 1
                ElseIf tnChild.StateImageIndex = CheckedState.Mixed Then
                    MixedNodes += 1
                    Exit For
                Else
                    UnCheckedNodes += 1
                End If
            Next
        End Sub

        Private Shared Function DetermineParentsNewImageState(tn As TreeNode, UnCheckedNodes As Integer, CheckedNodes As Integer, MixedNodes As Integer) As TreeNode
            'If MixedNodes > 0 Then
            '    tn.StateImageIndex = CheckedState.Mixed
            'ElseIf CheckedNodes > 0 AndAlso UnCheckedNodes = 0 Then
            '    'tn.StateImageIndex = If(tn.Checked, CheckedState.Checked, CheckedState.Mixed)
            'ElseIf (CheckedNodes > 0) Then
            '    tn.StateImageIndex = CheckedState.Mixed
            'Else
            '    tn.StateImageIndex = If(tn.Checked, CheckedState.Mixed, CheckedState.UnChecked)
            'End If

            If MixedNodes > 0 Then
                tn.StateImageIndex = CheckedState.Mixed
            ElseIf CheckedNodes > 0 AndAlso UnCheckedNodes = 0 Then
                tn.StateImageIndex = CheckedState.Checked
            ElseIf (CheckedNodes > 0) Then
                tn.StateImageIndex = CheckedState.Mixed
            Else
                tn.StateImageIndex = CheckedState.UnChecked
            End If

            Return tn
        End Function

        Private Sub NotifyParentsParent(tn As TreeNode, OrigStateImageIndex As Integer)
            If OrigStateImageIndex <> tn.StateImageIndex AndAlso tn.Parent IsNot Nothing Then
                UpdateParentState(tn.Parent)
            End If
        End Sub

        Protected Overrides Sub OnKeyDown(e As KeyEventArgs)
            MyBase.OnKeyDown(e)

            If e.KeyCode = Keys.Space Then
                SelectedNode.Checked = Not SelectedNode.Checked
            End If
        End Sub

        '	Protected override void OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs e)
        Protected Overrides Sub OnNodeMouseClick(e As TreeNodeMouseClickEventArgs)
            MyBase.OnNodeMouseClick(e)

            Dim info As TreeViewHitTestInfo = HitTest(e.X, e.Y)
            If info Is Nothing OrElse info.Location <> TreeViewHitTestLocations.StateImage Then
                Return
            End If

            Dim tn As TreeNode = e.Node
            tn.Checked = Not tn.Checked
        End Sub


    End Class
End Namespace
